package bankingsystemclient;


import java.awt.CardLayout;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 * <p>This class represents the GUI and logic of the client of the banking system.</p>
 * <p> The class is JFrame which has PanelContainer with a card layout which contains 4 panels
 *  bankChoicePanel, loginPanel, mainMenuPanel and transactionHistoryPanel. </p>
 * <p>First the user chooses which bank to connect to in bankChoicePanel. If connection is successful,
 * the user is redirected to loginPanel where he/she can login using username and password. If login is successful
 * the user is redirected to mainMenuPanel where he/she deposit,withdraw or transfer money or logout. 
 * The user can also view the transaction history which redirects to transactionHistoryPanel. The user can get back to 
 * mainMenuPanel by pressing a back button.</p>
 * 
 */
public class BankingSystemClient extends javax.swing.JFrame {
    /**
     * Creates new form BankingSystemClient
     */
    public BankingSystemClient() {
        initComponents();
        cardLayout = (CardLayout)PanelCont.getLayout();
        cardLayout.addLayoutComponent(bankChoicePanel, "bankChoice");
        cardLayout.addLayoutComponent(loginPanel, "login");
        cardLayout.addLayoutComponent(mainMenPanel, "mainMenu");
        cardLayout.addLayoutComponent(transactionHistoryPanel, "transactionHistory");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        PanelCont = new javax.swing.JPanel();
        bankChoicePanel = new javax.swing.JPanel();
        connectButton = new javax.swing.JButton();
        ipTextField = new javax.swing.JTextField();
        portTextField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        loginPanel = new javax.swing.JPanel();
        passwordField = new javax.swing.JPasswordField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        loginButton = new javax.swing.JButton();
        usernameField = new javax.swing.JTextField();
        mainMenPanel = new javax.swing.JPanel();
        refreshButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        balanceLabel = new javax.swing.JLabel();
        amountField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        depositButton = new javax.swing.JButton();
        withdrawButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        transferAmountField = new javax.swing.JTextField();
        transferBankChoice = new javax.swing.JComboBox<>();
        accNumField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        transferButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        historyButton = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        accNumLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        userNameLabel = new javax.swing.JLabel();
        emailLabel = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        logoutButton = new javax.swing.JButton();
        transactionHistoryPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        histroyTable = new javax.swing.JTable();
        backButton = new javax.swing.JButton();
        msgLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        setSize(new java.awt.Dimension(0, 0));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        PanelCont.setPreferredSize(new java.awt.Dimension(800, 400));
        PanelCont.setLayout(new java.awt.CardLayout());

        bankChoicePanel.setPreferredSize(new java.awt.Dimension(600, 400));

        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        jLabel11.setText("IP Address");

        jLabel12.setText("Port");

        javax.swing.GroupLayout bankChoicePanelLayout = new javax.swing.GroupLayout(bankChoicePanel);
        bankChoicePanel.setLayout(bankChoicePanelLayout);
        bankChoicePanelLayout.setHorizontalGroup(
            bankChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bankChoicePanelLayout.createSequentialGroup()
                .addGap(263, 263, 263)
                .addGroup(bankChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12))
                .addGap(18, 18, 18)
                .addGroup(bankChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bankChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(connectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(portTextField, javax.swing.GroupLayout.Alignment.LEADING))
                    .addComponent(ipTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(306, Short.MAX_VALUE))
        );
        bankChoicePanelLayout.setVerticalGroup(
            bankChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bankChoicePanelLayout.createSequentialGroup()
                .addContainerGap(89, Short.MAX_VALUE)
                .addGroup(bankChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ipTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(11, 11, 11)
                .addGroup(bankChoicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(connectButton)
                .addGap(147, 147, 147))
        );

        PanelCont.add(bankChoicePanel, "bankChoice");

        loginPanel.setAutoscrolls(true);
        loginPanel.setPreferredSize(new java.awt.Dimension(600, 400));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Username");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Password");

        loginButton.setText("Login");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout loginPanelLayout = new javax.swing.GroupLayout(loginPanel);
        loginPanel.setLayout(loginPanelLayout);
        loginPanelLayout.setHorizontalGroup(
            loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginPanelLayout.createSequentialGroup()
                .addGap(168, 168, 168)
                .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(30, 30, 30)
                .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(usernameField, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .addComponent(passwordField))
                .addGap(0, 344, Short.MAX_VALUE))
            .addGroup(loginPanelLayout.createSequentialGroup()
                .addGap(224, 224, 224)
                .addComponent(loginButton)
                .addGap(250, 250, 250))
        );
        loginPanelLayout.setVerticalGroup(
            loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loginPanelLayout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameField)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(loginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordField)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(loginButton)
                .addGap(69, 69, 69))
        );

        PanelCont.add(loginPanel, "login");

        mainMenPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        mainMenPanel.setMaximumSize(new java.awt.Dimension(40000, 40000));
        mainMenPanel.setPreferredSize(new java.awt.Dimension(700, 400));

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Balance:");

        balanceLabel.setText("sdfasdf");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Amount");

        depositButton.setText("Deposit");
        depositButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                depositButtonActionPerformed(evt);
            }
        });

        withdrawButton.setText("Withdraw");
        withdrawButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                withdrawButtonActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Amount");

        transferBankChoice.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Bank 1", "Bank 2" }));


        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Account No.");

        transferButton.setText("Transfer");
        transferButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transferButtonActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        historyButton.setText("Transaction History");
        historyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historyButtonActionPerformed(evt);
            }
        });

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("account Number:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setText("Name:");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText("Username:");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText("Email:");

        accNumLabel.setText("25487");

        nameLabel.setText("Abdulllah Abdelrazik");

        userNameLabel.setText("Superabdoo");

        emailLabel.setText("abdallah.abdoooo@gmail.com");

        jLabel15.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel15.setText("Account Infromation");

        logoutButton.setText("Logout");
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainMenPanelLayout = new javax.swing.GroupLayout(mainMenPanel);
        mainMenPanel.setLayout(mainMenPanelLayout);
        mainMenPanelLayout.setHorizontalGroup(
            mainMenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainMenPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(47, 47, 47)
                .addComponent(balanceLabel)
                .addGap(96, 96, 96)
                .addComponent(refreshButton)
                .addGap(173, 173, 173)
                .addComponent(logoutButton)
                .addGap(146, 146, 146))
            .addGroup(mainMenPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainMenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainMenPanelLayout.createSequentialGroup()
                        .addGroup(mainMenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainMenPanelLayout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(historyButton)
                                .addGap(73, 73, 73))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainMenPanelLayout.createSequentialGroup()
                                .addGroup(mainMenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(mainMenPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(userNameLabel))
                                    .addGroup(mainMenPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(nameLabel))
                                    .addGroup(mainMenPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addGap(18, 18, 18)
                                        .addComponent(accNumLabel))
                                    .addGroup(mainMenPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(emailLabel)))
                                .addGap(18, 18, 18)))
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addGroup(mainMenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainMenPanelLayout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(amountField, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(mainMenPanelLayout.createSequentialGroup()
                                .addComponent(depositButton)
                                .addGap(31, 31, 31)
                                .addComponent(withdrawButton)))
                        .addGap(38, 38, 38)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addGroup(mainMenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainMenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(mainMenPanelLayout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                                    .addComponent(accNumField, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(mainMenPanelLayout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(transferAmountField, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(mainMenPanelLayout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addGroup(mainMenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(transferBankChoice, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(transferButton))
                                .addGap(60, 60, 60)))
                        .addGap(35, 35, 35))
                    .addComponent(jSeparator2))
                .addContainerGap())
            .addGroup(mainMenPanelLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel15)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mainMenPanelLayout.setVerticalGroup(
            mainMenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainMenPanelLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(mainMenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(balanceLabel)
                    .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(logoutButton))
                .addGap(16, 16, 16)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(mainMenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainMenPanelLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jLabel15)
                        .addGroup(mainMenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainMenPanelLayout.createSequentialGroup()
                                .addGroup(mainMenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(mainMenPanelLayout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(mainMenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel7)
                                            .addComponent(accNumLabel))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(mainMenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(nameLabel)
                                            .addComponent(jLabel8))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(mainMenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel9)
                                            .addComponent(userNameLabel))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(mainMenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(emailLabel)
                                            .addComponent(jLabel10))
                                        .addGap(26, 26, 26)
                                        .addComponent(historyButton))
                                    .addGroup(mainMenPanelLayout.createSequentialGroup()
                                        .addGap(32, 32, 32)
                                        .addGroup(mainMenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel4)
                                            .addComponent(amountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(29, 29, 29)
                                        .addGroup(mainMenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(depositButton)
                                            .addComponent(withdrawButton))))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainMenPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                                .addGroup(mainMenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(transferAmountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainMenPanelLayout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabel5)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(mainMenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(accNumField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6))
                                .addGap(18, 18, 18)
                                .addComponent(transferBankChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(transferButton)
                                .addGap(51, 51, 51))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainMenPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(mainMenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)))))
        );

        PanelCont.add(mainMenPanel, "MainMenu");
        mainMenPanel.getAccessibleContext().setAccessibleName("");

        histroyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Time", "Transaction", "Amount", "Balance", "Info"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        histroyTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        histroyTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(histroyTable);
        if (histroyTable.getColumnModel().getColumnCount() > 0) {
            histroyTable.getColumnModel().getColumn(0).setPreferredWidth(200);
            histroyTable.getColumnModel().getColumn(1).setPreferredWidth(150);
            histroyTable.getColumnModel().getColumn(2).setPreferredWidth(120);
            histroyTable.getColumnModel().getColumn(3).setPreferredWidth(120);
            histroyTable.getColumnModel().getColumn(4).setPreferredWidth(204);
        }

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout transactionHistoryPanelLayout = new javax.swing.GroupLayout(transactionHistoryPanel);
        transactionHistoryPanel.setLayout(transactionHistoryPanelLayout);
        transactionHistoryPanelLayout.setHorizontalGroup(
            transactionHistoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
            .addGroup(transactionHistoryPanelLayout.createSequentialGroup()
                .addGap(315, 315, 315)
                .addComponent(backButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        transactionHistoryPanelLayout.setVerticalGroup(
            transactionHistoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(transactionHistoryPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addComponent(backButton))
        );

        PanelCont.add(transactionHistoryPanel, "card5");

        msgLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        msgLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PanelCont, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(68, Short.MAX_VALUE)
                    .addComponent(msgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 722, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addComponent(PanelCont, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(msgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(351, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>                        
    
    /**
     * This function is called when the user presses the connect button in bankChoicePanel
     * it attempts to establish connection with the bank server.
     * @param evt 
     */
    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
        try{
            msgLabel.setText("Connecting...");
           //1.create client socket and connect to server
	   socket = new Socket(ipTextField.getText(), Integer.valueOf(portTextField.getText()));
            //2.create comm streams
	    dis = new DataInputStream(socket.getInputStream());
	    dos = new DataOutputStream(socket.getOutputStream());
            msgLabel.setText("");
            cardLayout.next(PanelCont);
        }catch( Exception e){
             msgLabel.setText("Connection Failed");
        }
    }                                             
    
    /**
     * This function is called when connection to the server is lost.
     * Returns to first window and closes connection with the server.
     */
    private void connectionLostHandler(){
        msgLabel.setText("Connection Lost");
        cardLayout.first(PanelCont);
        PanelCont.setVisible(true);
        closeConnection();
    }
    
    /**
     * This function is called when login button in the loginPanel is pressed.
     * It sends the server a login request in the form {@code LOG:username,password}
     * The server response will either be
     * <ul>
     * <li>{@code LOG:0} ==> means login successful.</li>
     * <li>{@code LOG:1} ==> means login failed.</li>
     * </ul>
     * @param evt 
     */
    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
       try{
           //TODO: Passwords and usernames should be > 8 charachters
           if(usernameField.getText().length() == 0 || passwordField.getPassword().length == 0){
               msgLabel.setText("Username and password shouldn't be empty.");
               return;
           }else{
               PanelCont.setVisible(false);
               msgLabel.setText("Loging in...");
               String request = "LOG:" + usernameField.getText() + "," + new String(passwordField.getPassword());
               usernameField.setText("");   //clear fields
               passwordField.setText("");
               System.out.println("sending ==>\t" + request);
               dos.writeUTF(request);
               String response = dis.readUTF();
               System.out.println("response= " + response);
               PanelCont.setVisible(true);
               
               //result will be LOG:0 or LOG:1
               switch(response.charAt(4)){
                   case '0':    //login success
                       msgLabel.setText("Logged in. Fetching informaiton..");
                       displayAccountInfo(getAccountInfo());
                       msgLabel.setText("Welcome, " + nameLabel.getText());
                       cardLayout.next(PanelCont);
                       break;
                    case '1': //login failed
                        msgLabel.setText("Login failed. Please try again.");
                        break;
               }
           }
       }catch(IOException e){
          connectionLostHandler();
       }
    }                                           
    
    /**
     * This function is called when the form is first shown
     * it show the first Panel which is bankChoicePanel.
     * @param evt 
     */
    private void formComponentShown(java.awt.event.ComponentEvent evt) {                                    
        cardLayout.show(PanelCont, "bankChoice");
    }                                   
    
    /**
     * <p>This function is called when Transaction History button in the mainMenuPanel is pressed.</p>
     * <p>It sends the server requests in the form {@code HST:offset} and the server response will
     * be 5 transaction  starting from {@code offset}.</p>
     * TODO: refrence documentation of server
     * <p> Transaction Formats:- <br>
     *  <ul>
     *      <li>Deposit ==> timestamp,DEP,amount,balanceAfterTransaction</li>
     *      <li>Withdraw ==> timestamp,WTD,amount,balanceAfterTransaction</li>
     *      <li>Incoming Transfer ==> timestamp,TRFIN,bank,accNo,amount,balance</li>
     *      <li>Outgoing Transfer ==> timestamp,TRFOUT,bank,accNo,amount,balance</li>
     *  </ul>
     * </p>
     * <p> Each of the 5 transactions sent by the server is separated by {@code #} from the other transactions.
     * If there are less than 5 transactions remaining, the server will send keyword {@code end} 
     * after the last transaction. 
     * </p>
     * 
     * <p>example:-<br>
     * Say that the user has 7 transactions in transaction history. and client sent request {@code HST:0}
     * the server will send the first 5 transactions like this <br>
     * {@code HST:1480564488236,DEP,100000,100000#1480714421456,WTD,20000,80000#1480814598752,TRFOUT,bank 2,28754,5000,75000#1480914599999,TRFIN,bank 1,21458,6000,81000#1480104651548,DEP,2540,100,81100}<br>
     * </p>
     * <p>
     * when client next sends HST:5 the server response will be the next 5 transaction starting from
     * transaction number 6 but because there's only 7 transactions the server will
     * send transactions 6 and 7 then the keyword {@code end}<br>
     * {@code HST:1481104651548,DEP,500,81600#1481204651548,WTD,2000,79600#end}
     * </p>
     * @param evt 
     */
    private void historyButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
        cardLayout.show(PanelCont, "transactionHistory");
        PanelCont.setVisible(false);
        DefaultTableModel model = (DefaultTableModel) histroyTable.getModel() ;
        model.getDataVector().clear(); //remove contents of table
        try{
            int offset = 1; //begin getting from first transaction
            msgLabel.setText("Getting history .....");
            while(true){
                boolean finish = false;
                String request = "HST:" + offset;
                System.out.println("sending ==>\t" + request);
                dos.writeUTF(request);
                String response = dis.readUTF();
                System.out.println("response= " + response);
                String result[] = response.substring(response.indexOf(':')+1).split("#");
                for(String row : result){
                    if(row.equals("end")){
                        finish  = true;
                        break;
                    }
                    displayRow(row);
                }
                if(finish)  break;
                offset += 5;
            }
            PanelCont.setVisible(true);
            msgLabel.setText("Transaction History");
        }catch(IOException e){
            model.getDataVector().clear();
            connectionLostHandler();
        } 
               
    }                                             
    
    /**
     * This function takes a row representing one transaction done by the user
     * and display it in the historyTable in transactionHistoryPanel
     * 
     * @param row A string representing one transaction done by the user 
     *             (deposit,withdraw,incoming transfer or outgoing transfer)
     *            <p> Transaction Formats:- <br>
     *              <ul>
     *                  <li>Deposit ==> timestamp,DEP,amount,balanceAfterTransaction</li>
     *                  <li>Withdraw ==> timestamp,WTD,amount,balanceAfterTransaction</li>
     *                  <li>Incoming Transfer ==> timestamp,TRFIN,bank,accNo,amount,balance</li>
     *                  <li>Outgoing Transfer ==> timestamp,TRFOUT,bank,accNo,amount,balance</li>
     *              </ul>
     *            </p>
     * @see historyButtonActionPerformed
     */           
    private void displayRow(String row){
        String fields[] = row.split(",");
        String[] tableRow = new String[5];
        tableRow[0] = fields[0]; //timestamp
        String operation= fields[1];
        if(operation.equals("DEP") || operation.equals("WTD")){
            tableRow[1] = operation.equals("DEP")? "Deposit" : "Withdraw";  //operation
            tableRow[2] = String.format("%,.2f", Double.valueOf(fields[2]));    //amount
            tableRow[3] = String.format("%,.2f", Double.valueOf(fields[3]));    //balance after transaction
        }
        else if (operation.equals("TRFOUT") || operation.equals("TRFIN")){
            tableRow[1] = operation.equals("TRFOUT")? "Outgoing Transfer" : "Incoming Transfer";    //operation
            tableRow[4] = "Account: " + fields[3] + " Bank: " + fields[2];  //account and bank
            tableRow[2] = String.format("%,.2f", Double.valueOf(fields[4]));    //balancea fter transaction
            tableRow[3] = String.format("%,.2f", Double.valueOf(fields[5]));
        }
        DefaultTableModel model = (DefaultTableModel) histroyTable.getModel();
        model.addRow(tableRow);
    }
    
     /**
     * This function is called when transfer button in the manMenu is pressed
     * (The user wants to transfer money to another account). 
     * It sends the server a transfer request in the form {@code TRF:bank,accNo,ammount}
     * The server response will either be
     * <ul>
     * <li>{@code TRF:0} ==> means transfer successful.</li>
     * <li>{@code TRF:1} ==> means transfer failed.</li>
     * <li>{@code TRF:2} ==> means balance is not enough.</li>
     * <li>{@code TRF:3} ==> means server couldn't connect to the other bank.</li>
     * <li>{@code TRF:4} ==> means server couldn't find that account.</li>
     * </ul>
     * @param evt 
     */
    private void transferButtonActionPerformed(java.awt.event.ActionEvent evt) {                                               
           String amount = transferAmountField.getText();
           String accNo = accNumField.getText();
           String bank = (String)transferBankChoice.getSelectedItem();
           if(amount.length() == 0){
               msgLabel.setText("Please specify the amount to be transfered.");
               return;
            }else if(!isNumber(amount)){
               amountField.setText(""); //clear field
               msgLabel.setText("Please specify a valid amount.");
               return;
            }else if(accNo.length() == 0){
               msgLabel.setText("Please specify the account number you want to transfer to.");
               return;
           }else if(!isInteger(accNo)){
               accNumField.setText("");
               msgLabel.setText("Please specify a valid account number. Account numbers are integers only.");
               return;
           }else{
               try{
               PanelCont.setVisible(false);
               msgLabel.setText("Transfering...");
               amount = String.format("%.2f", Double.valueOf(amount));
               String request = "TRF:" + bank + ","
                                       + Integer.valueOf(accNo) +"," 
                                       + amount;
               System.out.println("sending ==>\t" +  request);
               dos.writeUTF(request);
               String response = dis.readUTF();
               System.out.println("response= " + response);
               transferAmountField.setText(""); //clear ammount  field
               accNumField.setText("");  //clear account number field
               transferBankChoice.setSelectedIndex(0);
               //result will be TFR:0 , TFR:1, TFR:2, TFR:3 or WTD:4
               switch(response.charAt(4)){
                   case '0':    //transfer success
                       msgLabel.setText("Transfered " + amount + " LE to account: \"" + accNo + "\" in bank \"" + bank + "\".");
                       break;
                   case '1': //transfer failed
                        msgLabel.setText("Transfered failed. Please try again.");
                        break;
                   case '2': //not enough balance
                        msgLabel.setText("Not enough balance.");
                        break;
                   case '3': //Bank not connecting
                        msgLabel.setText("Can't connect to bank \"" + bank + "\".");
                        break;
                   case '4': //Account not found
                        msgLabel.setText("Account: \"" +accNo +  "\" not found in bank \"" + bank + "\".");
                        break;
               }
               }catch(IOException e){
                   connectionLostHandler();
               }
           }
           displayAccountInfo(getAccountInfo());
           PanelCont.setVisible(true);
    }                                              

     /**
     * This function is called when deposit button in the manMenu is pressed
     * (The user wants to deposit money). 
     * It sends the server a deposit request in the form {@code DEP:ammount}
     * The server response will either be
     * <ul>
     * <li>{@code DEP:0} ==> means deposit successful.</li>
     * <li>{@code DEP:1} ==> means deposit failed.</li>
     * </ul>
     * @param evt 
     */
    private void depositButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
           String amount = amountField.getText();
           if(amount.length() == 0){
               msgLabel.setText("Please specify the amount to be deposited.");
               return;
           }else if(!isNumber(amount)){
               amountField.setText(""); //clear field
               msgLabel.setText("Please specify a valid amount.");
               return;
           }else{
               try{
               PanelCont.setVisible(false);
               msgLabel.setText("Depositig...");
               amount = String.format("%.2f", Double.valueOf(amount));
               String request = "DEP:" + amount;
               System.out.println("sending ==>\t" + request);
               dos.writeUTF(request);
               String response = dis.readUTF();
               System.out.println("response= " + response);
               amountField.setText(""); //clear field
               //result will be DEP:0 or DEP:1
               switch(response.charAt(4)){
                   case '0':    //deposit success
                       msgLabel.setText("Deposited " + amount + " LE");
                       break;
                    case '1': //deposit failed
                        msgLabel.setText("Deposit failed. Please try again.");
                        break;
               }
               }catch(IOException e){
                   connectionLostHandler();
               }
           }
           displayAccountInfo(getAccountInfo());
           PanelCont.setVisible(true);
    }                                             

    /**
     * This function is called when withdraw button in the manMenu is pressed
     * (The user wants to withdraw money). 
     * It sends the server a withdraw request in the form {@code WTD:ammount}
     * The server response will either be
     * <ul>
     * <li>{@code WTD:0} ==> means withdraw successful.</li>
     * <li>{@code WTD:1} ==> means withdraw failed.</li>
     * <li>{@code WTD:2} ==> means not enough balance.</li>
     * </ul>
     * @param evt 
     */
    private void withdrawButtonActionPerformed(java.awt.event.ActionEvent evt) {                                               
           String amount = amountField.getText();
           if(amount.length() == 0){
               msgLabel.setText("Please specify the amount to be withdrawn.");
               return;
           }else if(!isNumber(amount)){
               amountField.setText(""); //clear field
               msgLabel.setText("Please specify a valid amount.");
               return;
           }else{
               try{
               PanelCont.setVisible(false);
               msgLabel.setText("Withdrawing...");
               amount = String.format("%.2f", Double.valueOf(amount));
               String request = "WTD:" +amount;
               System.out.println("sending ==>\t" + request);
               dos.writeUTF(request);
               String response = dis.readUTF();
               System.out.println("response= " + response);
               amountField.setText(""); //clear field
               //result will be WTD:0 , WTD:1 or WTD:2
               switch(response.charAt(4)){
                   case '0':    //withdraw success
                       msgLabel.setText("Withdrew " + amount + " LE");
                       break;
                   case '1': //withdraw failed
                        msgLabel.setText("Withdraw failed. Please try again.");
                        break;
                   case '2': //not enough balance
                        msgLabel.setText("Not enough balance.");
                        break;
               }
               }catch(IOException e){
                   connectionLostHandler();
               }
           }
           displayAccountInfo(getAccountInfo());
           PanelCont.setVisible(true);
    }                                              
    
    /**
     * This function is called when the user presses the back button transactionHistoryPanel
     * to return to MainMenu Panel
     * @param evt 
     */
    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        DefaultTableModel model = (DefaultTableModel) histroyTable.getModel();
        model.getDataVector().clear();
        msgLabel.setText("Reuturning ..");
        displayAccountInfo(getAccountInfo());
        cardLayout.previous(PanelCont);
        msgLabel.setText("");
    }                                          
    
    /**
     * This function is called when the user is closing the application.
     * It sends a logout request to the server then ends the connection with the server.
     * @param evt 
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {                                   
        try{
            if(dos != null)
                dos.writeUTF("LGO:");
            closeConnection();
        }catch(IOException e){
            connectionLostHandler();
        }
    }                                  
    
    
    /**
     * This function is called when the user presses the logout button
     * It sends the server a request to logout in the form {@code LGO:}
     * @param evt 
     */
    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        try{
            System.out.println("sening ==>\tLGO:");
            dos.writeUTF("LGO:");
        }catch(IOException e){
            connectionLostHandler();
        }
        msgLabel.setText("Logged out");
        cardLayout.first(PanelCont);
        PanelCont.setVisible(true);
        closeConnection();
    }     
    
    /**
     * Request information of the current user like (Accnum, firstname, lastname, email and balance)
     * @param evt 
     */
    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {                                              
        displayAccountInfo(getAccountInfo());
    }                                             
    
    /**
     * Closes open sockets and input/output streams
     */
    private void closeConnection(){
        try {
            if(socket != null)  socket.close();
            if(dis != null)     dis.close();
            if(dos != null)     dos.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
    /**
     * This function displays the user's account information.
     * @param accountInfo A string representing the user account information.
     *                    This string is in the form {@code accountNo,firstname,lastname,username,email,balance}
     */
    private void displayAccountInfo(String accountInfo){
        String[] result = accountInfo.split(",");
        String accNo = result[0];
        String firstName = result[1];
        String lastName = result[2];
        String userName = result[3];
        String email = result[4];
        accNumLabel.setText(accNo + "  "+ result[6] );
        nameLabel.setText(firstName + " " + lastName);
        userNameLabel.setText(userName);
        emailLabel.setText(email);
        double balance = Double.valueOf(result[5]);
        balanceLabel.setText(String.format("%,.2f", balance) + " LE");
    }
   
    /**
     * Returns a string representing the account information of the user.
     * It sends a request to the server in the form {@code INF:} requesting the user information.
     * The server response is in the form {@code INF:accountNo,firstName,LastName,userName,email,balance}
     * @return A string representing the user account information.
     *        This string is in the form {@code accountNo,firstname,lastname,username,email,balance}.
     *        <p>ex:- {@code INF:25487,abdullah,abdelrazik,limbo,abdallah.abdoooo@hotmail.com,5480}</p>
     *  
     */
    private String getAccountInfo(){
        try{
            dos.writeUTF("INF:");
            String response = dis.readUTF();
            System.out.println("response= " + response);
            return response.substring(response.indexOf(':')+1);
        }catch(IOException e){
            connectionLostHandler();
        }
        return "";
    }
    
    /**
     * Returns true if and only if the input string is number.
     * @param s String wanted to be checked if it's a number
     * @return True if {@code s} is a number.
     */
    private boolean isNumber(String s){
        return s.matches("\\d*\\.?\\d+");
    }
    
    /**
     * Returns true if and only if the input string is an integer.
     * @param s String wanted to be checked if it's an integer
     * @return True if {@code s} is an integer.
     */
    private boolean isInteger(String s){
        return s.matches("\\d+");
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BankingSystemClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BankingSystemClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BankingSystemClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BankingSystemClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BankingSystemClient().setVisible(true);
            }
        });
    }

    
    private Socket socket;
    private DataInputStream dis;
    private DataOutputStream dos;
    private CardLayout cardLayout;
    // Variables declaration - do not modify                     
    private javax.swing.JPanel PanelCont;
    private javax.swing.JTextField accNumField;
    private javax.swing.JLabel accNumLabel;
    private javax.swing.JTextField amountField;
    private javax.swing.JButton backButton;
    private javax.swing.JLabel balanceLabel;
    private javax.swing.JPanel bankChoicePanel;
    private javax.swing.JButton connectButton;
    private javax.swing.JButton depositButton;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JButton historyButton;
    private javax.swing.JTable histroyTable;
    private javax.swing.JTextField ipTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JButton loginButton;
    private javax.swing.JPanel loginPanel;
    private javax.swing.JButton logoutButton;
    private javax.swing.JPanel mainMenPanel;
    private javax.swing.JLabel msgLabel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JTextField portTextField;
    private javax.swing.JButton refreshButton;
    private javax.swing.JPanel transactionHistoryPanel;
    private javax.swing.JTextField transferAmountField;
    private javax.swing.JComboBox<String> transferBankChoice;
    private javax.swing.JButton transferButton;
    private javax.swing.JLabel userNameLabel;
    private javax.swing.JTextField usernameField;
    private javax.swing.JButton withdrawButton;
    // End of variables declaration                   


}
